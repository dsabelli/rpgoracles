generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model doc_types {
  id          Int           @id @default(autoincrement())
  doc_name    String        @db.VarChar
  doc_path    String        @unique @db.VarChar
  tag_id      Int
  subtag_id   Int?
  user_id     Int?
  sub_tags    sub_tags?     @relation(fields: [subtag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  main_tags   main_tags     @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       users?        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  meta_tables meta_tables[]
}

model main_tags {
  id          Int           @id @default(autoincrement())
  tag_name    String        @unique @db.VarChar
  tag_path    String        @unique @db.VarChar
  user_id     Int?
  doc_types   doc_types[]
  users       users?        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  meta_tables meta_tables[]
  sub_tags    sub_tags[]
}

model meta_tables {
  id                               Int             @id @default(autoincrement())
  meta_date                        DateTime        @default(now()) @db.Timestamptz(6)
  meta_name                        String          @db.VarChar
  meta_desc                        String          @db.VarChar
  meta_image                       String          @db.VarChar
  tag_id                           Int
  subtag_id                        Int?
  doc_id                           Int
  user_id                          Int?
  meta_alt                         String?         @db.VarChar
  doc_types                        doc_types       @relation(fields: [doc_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sub_tags                         sub_tags?       @relation(fields: [subtag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  main_tags                        main_tags       @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_meta_tables_user_idTousers users?          @relation("meta_tables_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  table_entries                    table_entries[]
}

model sub_tags {
  id          Int           @id @default(autoincrement())
  tag_name    String        @db.VarChar
  tag_path    String        @db.VarChar
  tag_id      Int
  user_id     Int?
  doc_types   doc_types[]
  meta_tables meta_tables[]
  main_tags   main_tags     @relation(fields: [tag_id], references: [id], onUpdate: NoAction)
  users       users?        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                                     Int             @id @default(autoincrement())
  email                                  String          @unique @db.VarChar
  username                               String          @db.VarChar
  password                               String          @db.VarChar
  created_at                             DateTime?       @default(now()) @db.Timestamptz(6)
  fav_table                              Int?
  doc_types                              doc_types[]
  main_tags                              main_tags[]
  meta_tables_meta_tables_user_idTousers meta_tables[]   @relation("meta_tables_user_idTousers")
  sub_tags                               sub_tags[]
  table_entries                          table_entries[]
}

model table_entries {
  id          Int         @id(map: "table_entry_pkey") @default(autoincrement())
  entry_value String      @db.VarChar
  table_id    Int
  user_id     Int?
  meta_tables meta_tables @relation(fields: [table_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       users?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
